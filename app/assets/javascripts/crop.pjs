// Testing:
/* @pjs preload="/images/IMG_5196.jpg"; */
ready_to_save = true;

// Initial canvas size

int init_size_x = 978;
int init_size_y = 652;
int bg_colour = #999999;

// Load test image

PImage imported_image;
imported_image = loadImage("/images/IMG_5196.jpg");

// Initial width and height + x/y of image
int iiw = init_size_x;
int iih = (imported_image.height / imported_image.width) * init_size_x;
int iix = 0;
int iiy = 0;
int siiw, siiw; // scaled width and height

// Scale & Rotate Control
int srox = iix+(iiw/2); // Origin
int sroy = iiy+(iih/2);
int srx = 100; // Control pos
int sry = -100;
float s_dist,angle; // distance of control from center
float angle_offset = atan(srx/sry);

color t_white = color(255,255,255,150);

// Action state (0 - none, 1 - over image, 2 - over scale handle, 3 - over rotate handle)
int action_state = 0;

// Are we dragging?
boolean locked = false;

// What was the offset of the mouse when the drag started?
int bdifx = 0;
int bdify = 0;

// Previous values (to halt draw if no change)
int prev_iix, prev_iiy, prev_srx, prev_sry;
boolean prev_show_controls;
int rc = 0;

//////////////////////////////////////////////////////////////////////////

void setup() {
	background(bg_colour);
	size(init_size_x, init_size_y);
	smooth();
	frameRate(30);
	strokeWeight(8);
}

//////////////////////////////////////////////////////////////////////////

void draw() {

	// Calculate
	int srox = iix+(iiw/2); // Calculate origin for center point
	int sroy = iiy+(iih/2);
	
	s_dist = sqrt( (srx*srx) + (sry*sry) ); // distance of control from center
	angle = atan(srx/sry);

	siiw = iiw/140*s_dist; // calculate scaled width and height
	siih = iih/140*s_dist;
	
	// Check for activity
	if (iix != prev_iix || iiy != prev_iiy || srx != prev_srx || sry != prev_sry || show_controls != prev_show_controls ) {
		rc = rc+1;

		// Clear screen
		background(bg_colour);
		
		// Draw Image
		imageMode(CENTER);
		translate(srox,sroy);
		rotate(-angle+angle_offset);
		image(
			imported_image,
			0,
			0,
			siiw,
			siih
		);
		rotate(angle-angle_offset);
		translate(-srox,-sroy);
		imageMode(CORNER);
		
		if(show_controls) {
			// Draw scale and rotate control
			fill(t_white);
			noStroke();
			ellipse(srox, sroy, 40, 40); // Draw center point
			ellipse(srox+srx, sroy+sry, 40, 40); // Draw control
			stroke(t_white);
			strokeWeight(8);
			line(srox, sroy, srox+srx, sroy+sry); // Draw guide line
			strokeWeight(1);
			noFill();
			ellipse(srox, sroy, s_dist*2, s_dist*2); // Guide circle
		}
	}
	
	// debug
	//text("mx"+mouseX+" my"+mouseY+" state"+action_state+" lock "+locked+" dist"+s_dist+" angle"+angle+" rc"+rc, 30,30);
	
	// Check action state
	if(locked == false) {
		action_state = 0;
		if(mouseX > iix && mouseX < iix+iiw && mouseY > iiy && mouseY < iiy+iih) {
			action_state = 1; // over imported image
		}
		if(mouseX > srox+srx-20 && mouseX < srox+srx+20 && mouseY > sroy+sry-20 && mouseY < sroy+sry+20) {
			action_state = 2; // over control
		}
	}
	
	// Populate vars for activity checking
	prev_iix = iix;
	prev_iiy = iiy;
	prev_srx = srx;
	prev_sry = sry;
	prev_show_controls = show_controls;
}

//////////////////////////////////////////////////////////////////////////

void mousePressed() {
	if (action_state == 0) { // Don't click there dick'ed.
		locked = false;
	}
    if (action_state == 1) { // Mouse pressed over imported image
        locked = true;
	    // Get offsets
		bdifx = mouseX-iix;
	    bdify = mouseY-iiy;
    }
    if (action_state == 2) { // Mouse pressed over control
        locked = true;
	    // Get offsets
		bdifx = mouseX-srx;
	    bdify = mouseY-sry;
    }
}

//////////////////////////////////////////////////////////////////////////

void mouseDragged() {
	if(action_state == 1) { // Move the imported image
		iix = mouseX-bdifx;
		iiy = mouseY-bdify;
	}
	if(action_state == 2) { // Move control
		srx = mouseX-bdifx;
		sry = mouseY-bdify;
	}
}

//////////////////////////////////////////////////////////////////////////

void mouseReleased() {
    locked = false;
}

