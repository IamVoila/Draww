////////////////////////////////////////
// Draww Framework
// Loaded along with tools.pjs
// Communicates with canvas_upload.js
////////////////////////////////////////

// TODO: All processing.js is broken in Firefox 3.6

// Preload interface images -------------------------------

/* @pjs preload="/images/drop-here.png"; */

///////////////////////////////////////////////////////////
// Globals ////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Draw state
int state = 0; // 0: Init   1: Wait for Image   2: Image Loaded

// Current tool (pointer for tool array defined in tool.pjs)
int tool_id = 1;

// Object to hold imported image
PImage imported_image;
int image_wait_time = 0; 
// Object for finalised canvas after a tool has completed / been changed
PImage canv_image;

// Initial user instruction image
PImage dropHere;
dropHere = loadImage("/images/drop-here.png");

// Misc
int init_size_x = 1024;
int init_size_y = 768;
var bg_colour = #999999;

///////////////////////////////////////////////////////////
// Functions to interface with JS /////////////////////////
///////////////////////////////////////////////////////////

// Set current tool
void setTool(t) {
	if ( t != 'none' ) {
		// push current canvas state to image
		tool[tool_id].finalise();
		// set and init tool
		tool_id = t;
		tool[tool_id].init();
		// Make sure correct item is selected in dropdown
		setToolFormEl(t);
	}
}

// Load image into canvas
void setImage(s) {
	console.log('setImage');
	imported_image = requestImage(s , "" , image_loaded_callback());
}

// Resize image in canvas
// TODO: This needs to either take edits with it or not fire after drawing started
void resizeCanvas(w, h) {
	console.log('resize called');
	size(w, h);
	if(imported_image) { image(imported_image , 0 , 0 , width , height); }
}

void undo() {
	image(canv_image, 0, 0);
}

///////////////////////////////////////////////////////////
// Image Importing ////////////////////////////////////////
///////////////////////////////////////////////////////////

void image_loaded_callback() {
	console.log('imageloaded callback')
	image_wait_time = 10;
	state = 1;
}

///////////////////////////////////////////////////////////
// Processing Setup Hook //////////////////////////////////
///////////////////////////////////////////////////////////

void setup() {
	size(init_size_x, init_size_y);
	background(bg_colour);
	smooth();
	noStroke();
	
	// Callback for JS (see pjsReadyFn[] )
	if(typeof window.processingReady == 'function') {
		processingReady();
	}
	
}

///////////////////////////////////////////////////////////
// Drawing Loop (called every frame) //////////////////////
///////////////////////////////////////////////////////////

void draw() {
	switch(state) {
		case 0: // Init (nothing loaded)

			image(dropHere, 
				int(width/2 - (dropHere.width/2)), 
				int(height/2 - (dropHere.height/2))
			);
			// image(dropHere, random(200), random(200));
			
		break;
		
		case 1: // Wait for Image
		
			// Hack cos requestImage (imageLoaded) callback appears to be broken
			// https://processing-js.lighthouseapp.com/projects/41284-processingjs/tickets/558-loadimage-behaviour-is-out-of-sync-with-processing-api
			if(image_wait_time > 0) {
				image_wait_time -= 1;
			} else {
				state = 2;
				ready_to_save = true; // TODO: This should call a function ~ enabling save button
				setTool(0);
			}
			
		break;
		
		case 2: // Drawing!
		
			tool[tool_id].draw();
			
		break;
	}
}

///////////////////////////////////////////////////////////
// Other hooks for tools //////////////////////////////////
///////////////////////////////////////////////////////////

void mousePressed() {	
	tool[tool_id].mousePressed();
}

void mouseDragged() {
	tool[tool_id].mouseDragged();
}

void mouseReleased() {
	tool[tool_id].mouseReleased();
}

