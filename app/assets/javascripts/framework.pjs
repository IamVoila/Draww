////////////////////////////////////////
// Draww Framework
// Loaded along with tools.pjs
// Communicates with canvas_upload.js
////////////////////////////////////////


///////////////////////////////////////////////////////////
// Globals ////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Draw state
boolean image_rendered = false;

// Current tool (pointer for tool array defined in tool.pjs)
int tool_id = 1;

// Object to hold imported image
PImage imported_image;

// Object for finalised canvas after a tool has completed / been changed
PImage canv_image;

// Canvas parameters
int init_size_x = 530;
int init_size_y = 530;
var bg_colour = #999999;

///////////////////////////////////////////////////////////
// Functions to interface with JS /////////////////////////
///////////////////////////////////////////////////////////

// Set current tool
void setTool(t) {
	if ( t != 'none' ) {
		// push current canvas state to image
		tool[tool_id].finalise();
		// set and init tool
		tool_id = t;
		tool[tool_id].init();
		// Make sure correct item is selected in dropdown
		setToolFormEl(t);
	}
}

// Load image into canvas
void setImage(s) {
	console.log('setImage');
	imported_image = requestImage(s , "");
}

// Resize image in canvas
// TODO: This needs to either take edits with it or not fire after drawing started
// Also, image is rendering at wrong dimensions on resize.

void resizeCanvas(w, h) {
	console.log('PJS resizeCanvas called');
	size(w, h);
	if(imported_image) { image(imported_image , 0 , 0 , width , height); }
}

void undo() {
        console.log('PJS undo called');
	image(canv_image, 0, 0);
}

// Resize canvas to init dimensions ready to have data pulled for saving
// If we don't do this, the saved images will be different sizes depending on
// the user's browser resolution.

void prepare_to_save() {

}

///////////////////////////////////////////////////////////
// Processing Setup Hook //////////////////////////////////
///////////////////////////////////////////////////////////

void setup() {
    
        // Set initial canvas size and params, and fire callback for JS
        
	size(init_size_x, init_size_y);
	background(bg_colour);
	smooth();
	noStroke();
	
	// Callback for JS (see pjsReadyFn[] )
	if(typeof window.processingReady == 'function') {
		processingReady();
	}
	
}

///////////////////////////////////////////////////////////
// Drawing Loop (called every frame) //////////////////////
///////////////////////////////////////////////////////////

void draw() {
    
    // Check if the image is loaded.
    // If it is, call the JS function to show the the PJS Canvas once, set tool
    // to crop&scale, and run it once. For every frame after that, just run
    // the current tool.
    
    if(imported_image != null ) {
        if(imported_image.loaded && !image_rendered) {
            setTool(0);
            tool[tool_id].draw();
            imageRendered();
            image_rendered = true;
        }
        if(imported_image.loaded) {
            tool[tool_id].draw();
        }
    }

}

///////////////////////////////////////////////////////////
// Other hooks for tools //////////////////////////////////
///////////////////////////////////////////////////////////

void mousePressed() {	
	tool[tool_id].mousePressed();
}

void mouseDragged() {
	tool[tool_id].mouseDragged();
}

void mouseReleased() {
	tool[tool_id].mouseReleased();
}

