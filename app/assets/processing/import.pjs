// Import Tool
// Deals with placing the initial dropped image

$(document).trigger('pjs_loaded');

// Vars ////////////////////////////////////////////////////////////////////////

// Draw state
boolean image_rendered = false;

// Object to hold imported image
PImage imported_image;

// Object for finalised canvas after a tool has completed / been changed
PImage canv_image;

// Canvas parameters
int init_size_x = 530;
int init_size_y = 530;
var bg_colour = #999999;

// Working vars for crop and scale
int iiw, iih, iix, iiy, ssiw, siih, srox, sroy, srx, sry, 
action_state, bdifx, bdify, prev_iix, prev_iiy, prev_srx, prev_sry, rc;
float s_dist, s_angle, angle_offset;
boolean locked, prev_show_controls;
color t_white = color(255,255,255,150);

void setup_vars() {
    // Initial width and height + x/y of image
    iiw = init_size_x;
    iih = (imported_image.height / imported_image.width) * init_size_x;
    iix = 0;
    iiy = 0;
    
    // Scale & Rotate Control
    srox = iix+(iiw/2); // Origin
    sroy = iiy+(iih/2);
    srx = 100; // Control pos
    sry = -100;
    angle_offset = atan(srx/sry);
    
    // Action state (0 - none, 1 - over image, 2 - over scale handle, 3 - over rotate handle)
    action_state = 0;
    
    // Are we dragging?
    locked = false;
    
    // What was the offset of the mouse when the drag started?
    bdifx = 0;
    bdify = 0;
    
    // Previous values (to halt draw if no change)
    rc = 0;
    
    canv_image = get();
}

// Called from JS //////////////////////////////////////////////////////////////
// TODO: Can't this be done directly from JS?

// Load image into canvas
void setImage(s) {
    console.log('setImage Called');
    imported_image = requestImage(s , "");
}

// Processing Setup ////////////////////////////////////////////////////////////

void setup() {
    console.log("framework setup");
    
    // Set initial canvas size and params, and fire callback for JS
    
    size(init_size_x, init_size_y);
    background(bg_colour);
    smooth();
    noStroke();
    
}

// Processing Draw loop ////////////////////////////////////////////////////////

void draw() {
    console.log("framework draw");
    
    // Check if the image is loaded.
    // If it is, call the JS function to show the the PJS Canvas once, set tool
    // to crop&scale, and run it once. For every frame after that, just run
    // the current tool.
    
    if(imported_image != null ) {
        if(imported_image.loaded) {
            if(!image_rendered) {
                $(document).trigger('pjs_image_rendered');
                setup_vars();
                image_rendered = true;
            } else {
            
                // Calculate
                srox = iix+(iiw/2); // Calculate origin for center point
                sroy = iiy+(iih/2);
    
                s_dist = sqrt( (srx*srx) + (sry*sry) ); // distance of control from center
                angle = atan(srx/sry);
    
                siiw = iiw/140*s_dist; // calculate scaled width and height
                siih = iih/140*s_dist;
                
                // debug
                // fill(0,0,0);
                // rect(0,0,600,50);
                // fill(255,255,255);
                // text("mx"+mouseX+" my"+mouseY+" state"+action_state+" lock "+locked+" dist"+s_dist+" angle"+angle+" rc"+rc, 30,30);
    
                // Check for activity (only redraw if there is some)
                if (iix != prev_iix || iiy != prev_iiy || srx != prev_srx || sry != prev_sry || draww.show_controls != prev_show_controls ) {
                        rc = rc+1;
    
                        // Clear screen
                        //background(bg_colour);
                        image(canv_image, 0, 0);
    
                        // Draw Image
                        imageMode(CENTER);
                        translate(srox,sroy);
                        rotate(-angle+angle_offset);
                        image(
                                imported_image,
                                0,
                                0,
                                siiw,
                                siih
                        );
                        rotate(angle-angle_offset);
                        translate(-srox,-sroy);
                        imageMode(CORNER);
    
                        if(draww.show_controls) {
                                // Draw scale and rotate control
                                fill(t_white);
                                noStroke();
                                ellipse(srox, sroy, 40, 40); // Draw center point
                                ellipse(srox+srx, sroy+sry, 40, 40); // Draw control
                                stroke(t_white);
                                strokeWeight(8);
                                line(srox, sroy, srox+srx, sroy+sry); // Draw guide line
                                strokeWeight(1);
                                noFill();
                                ellipse(srox, sroy, s_dist*2, s_dist*2); // Guide circle
                        }
                }
    
                // Check action state
                if(locked == false) {
                        action_state = 0;
                        if(mouseX > iix && mouseX < iix+iiw && mouseY > iiy && mouseY < iiy+iih) {
                                action_state = 1; // over imported image
                        }
                        if(mouseX > srox+srx-20 && mouseX < srox+srx+20 && mouseY > sroy+sry-20 && mouseY < sroy+sry+20) {
                                action_state = 2; // over control
                        }
                }
    
                // Populate vars for activity checking
                prev_iix = iix;
                prev_iiy = iiy;
                prev_srx = srx;
                prev_sry = sry;
                prev_show_controls = draww.show_controls;
            }
        }
    }
}

void mousePressed() {
        if (action_state == 0) { // Don't click there dick'ed.
                locked = false;
        }
    if (action_state == 1) { // Mouse pressed over imported image
        locked = true;
            // Get offsets
                bdifx = mouseX-iix;
            bdify = mouseY-iiy;
    }
    if (action_state == 2) { // Mouse pressed over control
        locked = true;
            // Get offsets
                bdifx = mouseX-srx;
            bdify = mouseY-sry;
    }
}

void mouseDragged() {
        if(action_state == 1) { // Move the imported image
                iix = mouseX-bdifx;
                iiy = mouseY-bdify;
        }
        if(action_state == 2) { // Move control
                srx = mouseX-bdifx;
                sry = mouseY-bdify;
        }
}

void mouseReleased() {
    locked = false;
}
